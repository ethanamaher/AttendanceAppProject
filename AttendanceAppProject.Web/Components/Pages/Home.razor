@page "/"
@using System.Timers
@implements IDisposable
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using AttendanceAppProject.Dto.Models

<PageTitle>Student Submission Form</PageTitle>

<!-- Background container for home page -->
<div class="page"></div>

<!-- UTD Text Logo -->
<div class="logo-container">
    <div class="utd-text-logo">UTD</div>
</div>

<!-- Page title -->
<div class="page-title">Student Attendance</div>

<!-- Date and time display -->
<div class="datetime-display">
    @currentTime
</div>

<div class="form-container">
    @if (showLoginError)
    {
        <div class="error-message">
            Incorrect Student Information. Please try again.
        </div>
    }
    <EditForm Model="@studentResponse" OnValidSubmit="@SubmitForm" FormName="Student_Response_Form">
        <!-- field for student id -->
        <div class="student-id-field">
            <label class="field-label">Student ID</label>
            <InputText @bind-Value="studentResponse!.studentID" placeholder="Enter your student ID" />
        </div>




        <!-- dropdown field for class selection -->
        <div class="class-field">
            <label class="field-label">Class</label>
            <InputSelect @bind-Value="studentResponse!.classId">
                <!-- default value -->
                <option value="@Guid.Empty">Select a Class</option>

                @foreach (ClassDto classDto in classesList)
                {
                    <!-- for each class, display its name and tie value with its Guid -->
                    <option value="@classDto.ClassId">@classDto.ClassPrefix@classDto.ClassNumber @classDto.ClassName (@classDto.StartTime - @classDto.EndTime)</option>
                }
            </InputSelect>
        </div>



        <!-- form password field -->
        <div class="password-field">
            <label class="field-label">Password</label>
            <InputText @bind-Value="studentResponse!.formPassword" placeholder="Enter your password" />
        </div>



        <!-- button to handle form submission -->
        <div class="submit-button-container">
            <button type="submit">Submit</button>
        </div>

    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private StudentResponse? studentResponse { get; set; }
    private string currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
    private Timer? secondsTimer;
    private bool showLoginError = false;

    // List to store student information for now
    private List<StudentRecord> studentDatabase = new List<StudentRecord>();

    // list to store classes for dropdown
    public List<ClassDto> classesList = new List<ClassDto>();

    protected override async Task OnInitializedAsync()
    {
        // Set up timer using System.Timers.Timer
        secondsTimer = new Timer(1000);
        secondsTimer.Enabled = true;
        secondsTimer.AutoReset = true;
        secondsTimer.Elapsed += (sender, e) => UpdateTime();

        studentResponse ??= new();
        // Load classes
        await LoadClassesAsync();

        System.Diagnostics.Debug.WriteLine("Home component initialized");
    }

    // load classes from database
    private async Task LoadClassesAsync()
    {
        classesList = await Http.GetFromJsonAsync<List<ClassDto>>("api/class");
    }

    // method to update time on page automatically
    private void UpdateTime()
    {
        InvokeAsync(() =>
        {
            currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
            StateHasChanged();
        });
    }

    // Clean up timer when component is disposed
    public void Dispose()
    {
        secondsTimer?.Dispose();
    }

    // can integrate status codes for which part of form is invalid
    private async void FormError() {
        // Incorrect credentials - show error message
        showLoginError = true;
        System.Diagnostics.Debug.WriteLine("Login failed - incorrect information. Showing error message.");

        // Clear only the password field for retry
        studentResponse.formPassword = "";
    }

    // handle form submission
    private async void SubmitForm()
    {
        System.Diagnostics.Debug.WriteLine("Form Submission Detected");

        // checking for any empty data in form
        if(studentResponse.studentID == null || studentResponse.classId == Guid.Empty || studentResponse.formPassword == null) {
            System.Diagnostics.Debug.WriteLine("Invalid information input");
        }

        // Debug the current state
        System.Diagnostics.Debug.WriteLine($"StudentID: {studentResponse.studentID}");
        System.Diagnostics.Debug.WriteLine($"ClassID: {studentResponse.classId}");

        var studentExists = await Http.PostAsJsonAsync("api/student/exists", studentResponse.studentID);
        System.Diagnostics.Debug.WriteLine($"Student Exists: {studentExists.IsSuccessStatusCode}");
        System.Diagnostics.Debug.WriteLine($"Response: {studentExists}");
        // if student does not exist
        // can also further go into response statuscodes
        // 404 - not found
        // 400 - bad request
        if (!studentExists.IsSuccessStatusCode)
        {
            FormError();
            return;
        }

        var classExists = await Http.PostAsJsonAsync("api/class/exists", studentResponse.classId);
        System.Diagnostics.Debug.WriteLine($"Class Exists: {classExists.IsSuccessStatusCode}");
        System.Diagnostics.Debug.WriteLine($"Response: {classExists}");
        // if class does not exist
        // should never be 404
        // if errors, will be bad request
        if (!classExists.IsSuccessStatusCode)
        {
            FormError();
            return;
        }
        // Login successful, reset error flag
        showLoginError = false;

        System.Diagnostics.Debug.WriteLine($"Login successful for: {studentResponse}");
        System.Diagnostics.Debug.WriteLine("Navigating to: /quiz");

            // Login successful, redirect to Quiz.razor with query parameters
        NavigationManager.NavigateTo($"/quiz?studentId={Uri.EscapeDataString(studentResponse.studentID)}&class={Uri.EscapeDataString(studentResponse.classId.ToString())}");
    }

    // Student record model for database comparison
    public class StudentRecord
    {
        public string StudentID { get; set; } = "";
        public string Password { get; set; } = "";
        public Guid ClassId { get; set; } = Guid.Empty;
    }

    /*  Class for getting student info responses from form */
    public class StudentResponse
    {

        public string? studentID { get; set; }
        public Guid? classId { get; set; }

        public string? formPassword { get; set; }
    }
}