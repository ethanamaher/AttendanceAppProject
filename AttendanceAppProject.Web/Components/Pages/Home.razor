@page "/"
@using System.Timers
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Student Submission Form</PageTitle>

<!-- Background container for home page -->
<div class="page"></div>

<!-- UTD Text Logo -->
<div class="logo-container">
    <div class="utd-text-logo">UTD</div>
</div>

<!-- Page title -->
<div class="page-title">Student Attendance</div>

<!-- Date and time display -->
<div class="datetime-display">
    @currentTime
</div>

<div class="form-container">
    @if (showLoginError)
    {
        <div class="error-message">
            Incorrect Student Information. Please try again.
        </div>
    }
    <EditForm Model="studentResponse" OnValidSubmit="Submit" FormName="Student_Response_Form">
        <div class="student-id-field">
            <label class="field-label">Student ID</label>
            <InputText @bind-Value="studentResponse!.studentID" placeholder="Enter your student ID" />
        </div>
        <div class="class-field">
            <label class="field-label">Class</label>
            <InputSelect @bind-Value="studentResponse!.className">
                <option value="">Select a Class</option>
                @foreach (var className in classList)
                {
                    <option value="@className">@className</option>
                }
            </InputSelect>
        </div>
        <div class="password-field">
            <label class="field-label">Password</label>
            <InputText type="password" @bind-Value="studentResponse!.formPassword" placeholder="Enter your password" />
        </div>
        <div class="submit-button-container">
            <button type="submit">Submit</button>
        </div>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private StudentResponse? studentResponse { get; set; }
    private string currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
    private Timer? secondsTimer;
    private bool showLoginError = false;

    // List to store class names
    private List<string> classList = new List<string>();

    // Student database for validation
    private List<StudentRecord> studentDatabase = new List<StudentRecord>();

    protected override async Task OnInitializedAsync()
    {
        studentResponse ??= new();

        // Set up timer using System.Timers.Timer
        secondsTimer = new Timer(1000);
        secondsTimer.Enabled = true;
        secondsTimer.AutoReset = true;
        secondsTimer.Elapsed += (sender, e) => UpdateTime();

        // Load classes and student database
        await LoadClassesAsync();
        InitializeStudentDatabase();

        System.Diagnostics.Debug.WriteLine("Home component initialized");
    }

    private void InitializeStudentDatabase()
    {
        // In a real app, this would load from a database
        // Here we're using a sample hardcoded record
        studentDatabase.Add(new StudentRecord
            {
                StudentID = "chn210001",
                Password = "american",
                ClassName = "Computer Science"
            });

        // You can add more student records here as needed
        studentDatabase.Add(new StudentRecord
            {
                StudentID = "abc123456",
                Password = "password",
                ClassName = "Mathematics"
            });
    }

    private async Task LoadClassesAsync()
    {
        // In a real app, this would be a database call
        // Simulating database fetch with a delay
        await Task.Delay(100);

        // Sample data
        classList = new List<string>
        {
            "Mathematics",
            "Science",
            "English",
            "History",
            "Computer Science",
            "Physics",
            "Chemistry",
            "Biology",
            "Art",
            "Music"
        };
    }

    private void UpdateTime()
    {
        currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // Clean up timer when component is disposed
    public void Dispose()
    {
        secondsTimer?.Dispose();
    }

    private void Submit()
    {
        System.Diagnostics.Debug.WriteLine("Form Submission Detected");

        // Debug the current state
        System.Diagnostics.Debug.WriteLine($"StudentID: {studentResponse!.studentID}");
        System.Diagnostics.Debug.WriteLine($"ClassName: {studentResponse.className}");

        // Validate against student database
        ValidateStudentCredentials();

        if (studentResponse.student != null)
        {
            // Login successful, reset error flag
            showLoginError = false;

            System.Diagnostics.Debug.WriteLine($"Login successful for: {studentResponse}");
            System.Diagnostics.Debug.WriteLine("Navigating to: /quiz");

            // Login successful, redirect to Quiz.razor with query parameters
            NavigationManager.NavigateTo($"/quiz?studentId={Uri.EscapeDataString(studentResponse.student.StudentID)}&className={Uri.EscapeDataString(studentResponse.student.ClassName)}");
        }
        else
        {
            // Incorrect credentials - show error message
            showLoginError = true;
            System.Diagnostics.Debug.WriteLine("Login failed - incorrect information. Showing error message.");

            // Clear only the password field for retry
            studentResponse.formPassword = "";
        }
    }

    private void ValidateStudentCredentials()
    {
        // Check if student exists in the database with matching credentials
        var matchingStudent = studentDatabase.FirstOrDefault(s =>
            s.StudentID == studentResponse.studentID &&
            s.Password == studentResponse.formPassword &&
            s.ClassName == studentResponse.className);

        if (matchingStudent != null)
        {
            // Valid student - create a Student object
            studentResponse.student = new Student(matchingStudent.StudentID, matchingStudent.ClassName);
            System.Diagnostics.Debug.WriteLine($"Student validated: {matchingStudent.StudentID}");
        }
        else
        {
            // No matching student found
            studentResponse.student = null;
            System.Diagnostics.Debug.WriteLine("Student validation failed");
        }
    }

    // Student record model for database comparison
    public class StudentRecord
    {
        public string StudentID { get; set; } = "";
        public string Password { get; set; } = "";
        public string ClassName { get; set; } = "";
    }

    /*  Class for getting student info responses from form */
    public class StudentResponse
    {
        public Student? student { get; set; }
        public string? studentID { get; set; }
        public string? className { get; set; }
        public string? formPassword { get; set; }

        public override string ToString()
        {
            return student != null ? student.ToString() : "No student data";
        }
    }

    // Make sure Student class is defined properly
    public class Student
    {
        public string StudentID { get; set; }
        public string ClassName { get; set; }

        public Student(string studentID, string className)
        {
            StudentID = studentID;
            ClassName = className;
        }

        public override string ToString()
        {
            return $"StudentID: {StudentID}, Class: {ClassName}";
        }
    }
}