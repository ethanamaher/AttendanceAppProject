@page "/"
@inject HttpClient Http
@using AttendanceAppProject.Web.Models

<PageTitle>Attendance Form</PageTitle>


<link rel="stylesheet" href="output.css" />
<body class="bg-utdMint">
	<EditForm Model="@studentResponse" OnValidSubmit="Submit" FormName="Student">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="grid grid-rows-7">

			<div class="row-span-2 m-4 flex flex-col items-center">
				<label for="UTD-ID" class="text-2xl text-xl font-bold">UTD ID</label>
				<InputText id="UTD-ID" class="border-2 rounded-md border-orange-400 bg-orange-200" @bind-Value="studentResponse.UTDID" />
				<ValidationMessage For="@(() => studentResponse.UTDID)" />
			</div>





			<div class="row-span-2 m-4 flex flex-col items-center">
				<label for="UTD-ID" class="text-2xl text-xl font-bold">Class</label>
				<InputSelect @bind-Value="studentResponse!.classId">
					@if (studentResponse!.classId is null)
					{
						<option selected value="">none</option>
					}
					@foreach (ClassDto c in classes)
					{
						<option value="@c.ClassId">@c.ClassName</option>
					}
					@if (studentResponse.classId is not null)
					{
						<option value="">none</option>
					}
				</InputSelect>
				<ValidationMessage For="@(() => studentResponse.classId)" />
			</div>





			<div class="row-span-2 m-4 flex flex-col items-center">
				<label for="UTD-ID" class="text-2xl text-xl font-bold">Password</label>
				<InputText id="UTD-ID" class="border-2 rounded-md border-orange-400 bg-orange-200" @bind-Value="studentResponse.classPassword" />
				<ValidationMessage For="@(() => studentResponse.classPassword)" />
			</div>


			<button type="submit" class="border-2 bg-utdForest mx-64 rounded-xl border-orange-400 font-bold text-white">Submit</button>
		</div>
	</EditForm>
</body>

@code {
	[SupplyParameterFromForm]
	private StudentResponse? studentResponse { get; set; }
	private List<ClassDto> classes = new();

	protected override async Task OnInitializedAsync()
	{
		studentResponse ??= new();
		classes = await Http.GetFromJsonAsync<List<ClassDto>>("api/class");
		studentResponse.classes = classes;
	}

	/*
	* Change to OnValidSubmit and OnInvalidSubmit when doing input validation
	* - all fields should be required
	*/
	private void Submit()
	{
		System.Diagnostics.Debug.WriteLine("Form Submission Detected");

		if(studentResponse.validateEntry()) {
			System.Diagnostics.Debug.WriteLine(studentResponse.ToString());
		}

		ClearFields();
	}

	private void ClearFields()
	{
		studentResponse.UTDID = null;
		studentResponse.classId = null;
		studentResponse.classPassword = null;
	}
	/*	Class for getting student info responses from form
		*
		* takes information from form response and creates a Student object with that information
		*/
	public class StudentResponse
	{
		// student dict will be
		// key = studentid
		// value = student

		public string? UTDID { get; set; }
		public Guid? classId { get; set; }
		public string? classPassword { get; set; }


		public List<ClassDto> classes = new();
		ClassDto selectedClass { get; set; }

		public bool validateEntry()
		{
			foreach (ClassDto classDto in classes) {
				if(classDto.ClassId == classId) {
					selectedClass = classDto;
					return UTDID != null;
				}
			}
			return false;

		}

		public override string ToString()
		{
			string output = "";

			output += "------FORM SUBMISSION------\n";
			output += "STUDENT ID: " + UTDID + "\n";
			output += "Class Name: " + selectedClass.ClassName + "\n";
			output += "Class Id: " + selectedClass.ClassId + "\n";
			

			return output;
		}
	}

	public class Class
	{
		public string? classID { get; set; }
		public string? className { get; set; }
	}
}