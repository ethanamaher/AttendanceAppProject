@page "/"
@inject HttpClient Http
@using AttendanceAppProject.Web.Models

<PageTitle>Attendance Form</PageTitle>

<!--Christopher Palmer Css
Green 950 - dark Forest
orange 400
green 300 - utd mint green
-->
<link rel="stylesheet" href="output.css" />
<body class="bg-utdMint">
	<EditForm Model="@formResponse" OnValidSubmit="Submit" FormName="Student">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="grid grid-rows-7">

			<!-- Student ID Entry -->
			<div class="row-span-2 m-4 flex flex-col items-center">
				<label for="UTD-ID" class="text-2xl text-xl font-bold">UTD ID</label>
				<InputText id="UTD-ID" class="border-2 rounded-md border-orange-400 bg-orange-200" @bind-Value="formResponse.UTDID" />
				<ValidationMessage For="@(() => formResponse.UTDID)" />
			</div>



			<!-- 
			Class selection dropdown

			loops through cached database classes to display in dropdown
			-->
			<div class="row-span-2 m-4 flex flex-col items-center">
				<label for="dropdown" class="text-2xl text-xl font-bold">Class</label>
				<InputSelect id="UTD-ID" class="border-2 rounded-md border-orange-400 bg-orange-200" @bind-Value="formResponse!.classId">
					@if (formResponse!.classId is null)
					{
						<option selected value="@Guid.Empty">none</option>
					}
					@foreach (ClassDto classDto in formResponse!.classes)
					{
						<option value="@classDto.ClassId">@classDto.ClassName</option>
					}
				</InputSelect>
				<ValidationMessage For="@(() => formResponse.classId)" />
			</div>




			<!-- Password Entry -->
			<div class="row-span-2 m-4 flex flex-col items-center">
				<label for="UTD-ID" class="text-2xl text-xl font-bold">Password</label>
				<InputText id="UTD-ID" class="border-2 rounded-md border-orange-400 bg-orange-200" @bind-Value="formResponse.classPassword" />
				<ValidationMessage For="@(() => formResponse.classPassword)" />
			</div>

			<!-- 
			make so it doesnt reload page?
			right now it reinitialized page on submit but not really sure how to fix

			it doesnt take a lot of time but i think would be cleaner to not do that and rely on user reloading page to re-pull classes from db

			Ethan
			-->
			<button @onclick="() => Submit()" value="Submit" class="border-2 bg-utdForest mx-64 rounded-xl border-orange-400 font-bold text-white">Submit</button>
		</div>
	</EditForm>
</body>

@code {
	[SupplyParameterFromForm]
	private FormResponse? formResponse { get; set; }

	protected override async Task OnInitializedAsync()
	{
		formResponse ??= new();

		// pull classes list from database
		// done on initialization of page, should not need live updating
		formResponse.classes = await Http.GetFromJsonAsync<List<ClassDto>>("api/class");
	}

	/*
	* function called when form is submitted
	* 
	* should split to an onValid and onInvalid to guide program flow
	* - all fields should be required
	*/
	private void Submit()
	{
		System.Diagnostics.Debug.WriteLine("Form Submission Detected");



		if(!formResponse.ClassExists()) {
			System.Diagnostics.Debug.WriteLine("Class does not exist");
			ClearFields();
			return;
		}

		if(!formResponse.PasswordCheck()) {
			System.Diagnostics.Debug.WriteLine("Invalid Password");
			ClearFields();
			return;
		}


		System.Diagnostics.Debug.WriteLine(formResponse.ToString());

		ClearFields();
	}

	private void ClearFields()
	{
		formResponse.UTDID = null;
		formResponse.classId = null;
		formResponse.classPassword = null;
	}


	/*	Class for getting student info responses from form
	*/
	public class FormResponse
	{
		public string? UTDID { get; set; }
		public Guid? classId { get; set; }
		public string? classPassword { get; set; }



		// cache for classes pulled from database
		public List<ClassDto> classes = new();
		ClassDto selectedClass { get; set; }

		public bool ClassExists()
		{
			foreach (ClassDto classDto in classes)
			{
				if (classDto.ClassId == classId)
				{
					selectedClass = classDto;
					return true;
				}
			}

			return false;
		}

		public bool PasswordCheck() {
			return classPassword == "password";
		}

		public override string ToString()
		{
			string output = "";

			output += "------FORM SUBMISSION------\n";
			output += "STUDENT ID: " + UTDID + "\n";
			output += "Class Name: " + selectedClass.ClassName + "\n";
			output += "Class Id: " + selectedClass.ClassId + "\n";
			

			return output;
		}
	}

	public class Class
	{
		public string? classID { get; set; }
		public string? className { get; set; }
	}
}