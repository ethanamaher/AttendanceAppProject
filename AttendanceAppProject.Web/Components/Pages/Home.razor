@page "/"
@using System.Timers
@implements IDisposable
<PageTitle>Student Submission Form</PageTitle>
<!-- Date and time display -->
<div class="datetime-display">
    @currentTime
</div>
<EditForm Model="studentResponse" OnSubmit="Submit" FormName="Student_Response_Form">
    <div class="student-id-field">
        @* <label>
			Student ID: *@
        <InputText @bind-Value="studentResponse!.studentID" />
        @* </label> *@
    </div>
    <div class="class-field">
        @* <label>
			Class: *@
        <InputSelect @bind-Value="studentResponse!.className" class="form-control">
            <option value="">Select a Class</option>
            @foreach (var className in classList)
            {
                <option value="@className">@className</option>
            }
        </InputSelect>
        @* </label> *@
    </div>
    <div class="password-field">
        @* <label>
			Password: *@
        <InputText type="password" @bind-Value="studentResponse!.formPassword" />
        @* </label> *@
    </div>
    <div class="submit-button-container">
        <button type="submit">Submit</button>
    </div>
</EditForm>
@code {
    [SupplyParameterFromForm]
    private StudentResponse? studentResponse { get; set; }
    private string currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
    private Timer? secondsTimer;

    // List to store class names
    private List<string> classList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        studentResponse ??= new();

        // Set up timer using System.Timers.Timer
        secondsTimer = new Timer(1000);
        secondsTimer.Enabled = true;
        secondsTimer.AutoReset = true;
        secondsTimer.Elapsed += (sender, e) => UpdateTime();

        // Load classes (simulate database fetch)
        await LoadClassesAsync();
    }

    private async Task LoadClassesAsync()
    {
        // In a real app, this would be a database call
        // For example: classList = await YourDbService.GetClassesAsync();

        // Simulating database fetch with a delay
        await Task.Delay(100);

        // Sample data - replace this with your actual database query
        classList = new List<string>
        {
            "Mathematics",
            "Science",
            "English",
            "History",
            "Computer Science",
            "Physics",
            "Chemistry",
            "Biology",
            "Art",
            "Music"
        };
    }

    private void UpdateTime()
    {
        currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    // Clean up timer when component is disposed
    public void Dispose()
    {
        secondsTimer?.Dispose();
    }

    private void Submit()
    {
        System.Diagnostics.Debug.WriteLine("Form Submission Detected");
        studentResponse.convertResponseToStudent();
        if (studentResponse.student != null)
        {
            System.Diagnostics.Debug.WriteLine(studentResponse.ToString());
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("Error in creating student");
        }
        ClearFields();
    }

    private void ClearFields()
    {
        studentResponse.studentID = "";
        studentResponse.className = "";
        studentResponse.formPassword = "";
    }

        /*  Class for getting student info responses from form
            *
            * takes information from form response and creates a Student object with that information
            */
    public class StudentResponse
    {
        // student dict will be
        // key = studentid
        // value = student
        public Student? student { get; set; }
        public string? studentID { get; set; }
        public string? className { get; set; }
        public string? formPassword { get; set; }
        // add student info variables to dict list
        public void convertResponseToStudent()
        {
            // validate password first
            if (formPassword != "password")
            {
                return;
            }
            if (studentID != null && className != null && studentID.Length > 0 && className.Length > 0)
            {
                student = new Student(studentID, className);
            }
        }
        private bool validateEntry()
        {
            return studentID != null && className != null;
        }
        public override string ToString()
        {
            return student != null ? student.ToString() : "No student data";
        }
    }
}