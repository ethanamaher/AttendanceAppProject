<!--
Home Page Component
Handles student form submission for attendance app and navigates to quiz page on successful submission

Written by Ethan Maher
-->

@page "/"
@using System.Timers
@implements IDisposable
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using AttendanceAppProject.Dto.Models

<PageTitle>Student Submission Form</PageTitle>

<!-- Background container for home page -->
<div class="page"></div>

<!-- UTD Text Logo -->
<div class="logo-container">
    <div class="utd-text-logo">UTD</div>
</div>

<!-- Page title -->
<div class="page-title">Student Attendance</div>

<!-- Date and time display -->
<div class="datetime-display">
    @currentTime
</div>

<div class="form-container">
    @if (isLoading)
    {
        <div class="loading-spinner">
            Loading...
        </div>
    } else {
        @if (showLoginError)
        {
            <div class="error-message">
                Incorrect Student Information. Please try again.
            </div>
        }
        <EditForm Model="@studentResponse" OnValidSubmit="@SubmitForm">
            <!-- field for student id -->
            <div class="student-id-field">
                <label class="field-label">Student ID</label>
                <InputText @bind-Value="studentResponse!.studentId" placeholder="Enter your student ID" />
                <ValidationMessage For="@(() => studentResponse.studentId)" />
            </div>




            <!-- dropdown field for class selection -->
            <div class="class-field">
                <label class="field-label">Class</label>

                @if (classesList.Count > 0)
                {
                    <InputSelect @bind-Value="studentResponse!.classId">
                        <!-- default value -->
                        <option value="@Guid.Empty">Select a Class</option>
                        @foreach (ClassDto classDto in classesList)
                        {
                            <!-- for each class, display its name and tie value with its Guid -->
                            <option value="@classDto.ClassId">@classDto.ClassPrefix@classDto.ClassNumber @classDto.ClassName (@classDto.StartTime - @classDto.EndTime)</option>
                        }

                    </InputSelect>
                    <ValidationMessage For="@(() => studentResponse.classId)" />
                } else
                {
                    <!-- if there are no classes to choose from, do not allow selection -->
                    <span style="color:red; font-style: italic;">No classes to choose from right now.</span>
                }

            </div>



            <!-- form password field -->
            <div class="password-field">
                <label class="field-label">Password</label>
                <InputText @bind-Value="studentResponse!.formPassword" placeholder="Enter your password" />
                <ValidationMessage For="@(() => studentResponse.formPassword)" />
            </div>



            <!-- button to handle form submission -->
            <div class="submit-button-container">
                <button type="submit" disabled="@isSubmitting">Submit</button>
            </div>

            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromForm]
    private StudentResponse? studentResponse { get; set; }

    private string currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
    private Timer? secondsTimer;

    private bool showLoginError = false;
    private bool isSubmitting = false;

    // used to show loading display when page is loading
    private bool isLoading = true;

    // list to store classes for dropdown
    public List<ClassDto> classesList = new List<ClassDto>();

    protected override async Task OnInitializedAsync()
    {
        // Set up timer using System.Timers.Timer
        secondsTimer = new Timer(1000);
        secondsTimer.Enabled = true;
        secondsTimer.AutoReset = true;
        secondsTimer.Elapsed += (sender, e) => UpdateTime();

        studentResponse ??= new();
        // Load classes
        await LoadClassesAsync();


        // for valid classes load professors

        System.Diagnostics.Debug.WriteLine("Home component initialized");
        isLoading = false;
    }

    // load classes from database
    private async Task LoadClassesAsync()
    {
        // take current time from when classes load, can also pull from time page begins initializing
        DateTime now = DateTime.Now;
        TimeOnly timeNow = TimeOnly.FromDateTime(now);
        try {
            var response = await Http.GetFromJsonAsync<List<ClassDto>>("api/class");
            if(response is not null) {

                //classesList = response;
                foreach(ClassDto classDto in response)
                {
                    var classScheduleList = await Http.GetFromJsonAsync<List<ClassScheduleDto>>($"api/classschedule/{classDto.ClassId}");

                    DayOfWeek today = now.DayOfWeek;
                    
                    // check if there is class today for a given class
                    // parse DayOfWeek strings to DayOfWeek and if it does it is valid
                    // strings are stored as "Monday", "Tuesday", etc. so this works
                    bool hasClassToday = classScheduleList.Any(
                        cd => cd.DayOfWeek != null &&
                        Enum.TryParse(cd.DayOfWeek, true, out DayOfWeek parsed) &&
                        parsed == today
                    );

                    // if no class today for this class continue
                    if(!hasClassToday)
                    {
                        continue;
                    }


                    // check if class is going on at this time
                    // give buffer of 15 minutes before and after class to accept attendance
                    TimeOnly? adjustedStartTime = classDto.StartTime.Value.AddMinutes(-15);
                    TimeOnly? adjustedEndTime = classDto.EndTime.Value.AddMinutes(15);

                    // null check
                    if(adjustedStartTime is not null && adjustedEndTime is not null)
                    {
                        if (timeNow > adjustedStartTime && timeNow < adjustedEndTime)
                        {
                            classesList.Add(classDto);
                        }
                    }
                }
            } 
        }   catch(Exception e) {
            System.Diagnostics.Debug.WriteLine($"Error loading classes: {e.Message}");
        }

    }

    // method to update time on page automatically
    private void UpdateTime()
    {
        InvokeAsync(() =>
        {
            currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
            StateHasChanged();
        });
    }

    // Clean up timer when component is disposed
    public void Dispose()
    {
        if (secondsTimer is not null)
        {
            secondsTimer.Stop();
            secondsTimer.Dispose();
        }
    }

    // can integrate status codes for which part of form is invalid
    private void FormError() {
        // Incorrect credentials - show error message
        showLoginError = true;
        // Clear only the password field for retry
        studentResponse.formPassword = "";

        System.Diagnostics.Debug.WriteLine("Login failed - incorrect information. Showing error message.");     
    }

    // handle form submission
    private async Task SubmitForm()
    {
        isSubmitting = true;
        try
        {
            // if student does not exist
            // can also further go into response statuscodes
            // 404 - not found
            // 400 - bad request

            var studentExists = await Http.PostAsJsonAsync("api/student/exists", studentResponse.studentId);
            if (!studentExists.IsSuccessStatusCode)
            {
                System.Diagnostics.Debug.WriteLine("Student not found");
                FormError();
                return;
            }

            // if class does not exist
            // should never be 404
            // if errors, will be bad request
            var classExists = await Http.PostAsJsonAsync("api/class/exists", studentResponse.classId);   
            if (!classExists.IsSuccessStatusCode)
            {
                System.Diagnostics.Debug.WriteLine("Class not found");
                FormError();
                return;
            }

            var studentIdEncoded = Uri.EscapeDataString(studentResponse.studentId ?? "");
            var classIdEncoded = Uri.EscapeDataString(studentResponse.classId.ToString() ?? "");

            // Login successful, redirect to Quiz.razor with query parameters
            NavigationManager.NavigateTo($"/quiz?studentId={studentIdEncoded}&class={classIdEncoded}");


        } 
        catch(Exception ex) {
            System.Diagnostics.Debug.WriteLine($"Error during submission: {ex.Message}");
            showLoginError = true;

        }
        finally {
            isSubmitting = false;
        }   
    }

    /*  Class for getting student info responses from form */
    public class StudentResponse
    {
        [Required (ErrorMessage = "Student ID is Required")]
        public string? studentId { get; set; }

        [Required(ErrorMessage = "Class ID is Required")]
        public Guid? classId { get; set; }

        [Required(ErrorMessage = "Password is Required")]
        public string? formPassword { get; set; }
    }
}