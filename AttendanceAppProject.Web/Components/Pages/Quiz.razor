@page "/quiz"
@using System.Timers
@implements IDisposable
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using AttendanceAppProject.Dto.Models

<PageTitle>Student Quiz</PageTitle>

<!-- Override any browser default styles -->
<style>
    body, html {
    margin: 0;
    padding: 0;
    overflow: hidden;
    height: 100%;
    width: 100%;
    }
</style>

<div class="quiz-page">
    <!-- Background container -->
    <div class="quiz-page-background"></div>

    <!-- UTD Text Logo -->
    <div class="logo-container">
        <div class="utd-text-logo">UTD</div>
    </div>

    <!-- Content container with z-index to appear above background -->
    <div class="quiz-container">
        <div class="header">
            <div class="datetime-display">@currentTime</div>
        </div>

        <!-- display for student info and selected class -->
        <div class="student-info">
            <div class="info-item">Student ID: <span>@studentId</span></div>
            <div class="info-item">Class: 
                <span>@classDto.ClassPrefix @classDto.ClassNumber - @classDto.ClassName</span>
                <br />
                <span>(@classDto.StartTime - @classDto.EndTime)</span>

            </div>
        </div>

        <!-- if quiz is completed show result information -->
        @if (quizCompleted)
        {
            <div class="quiz-completed">
                <h2>Quiz Completed!</h2>
                <div class="score">Your Score: @score / 1</div>
                <button @onclick="ReturnToHome" class="return-button">Return to Home</button>
            </div>

        }
        <!-- if the student is not valid, should be checked before on home page submission thus should not happen in normal use-->
        @if (!isValidStudent)
        {
            <div class="invalid-access">
                <h2>Invalid Access</h2>
                <p>You must log in through the home page to access this quiz.</p>
                <button @onclick="ReturnToHome" class="return-button">Return to Home</button>
            </div>
        }
        <!-- quiz display -->
        @if(isValidStudent)
        {

            <EditForm Model="attendanceQuiz" OnValidSubmit="SubmitQuiz" FormName="Student_Attendance_Quiz">
                @foreach(QuizQuestionDto questionDto in quizQuestions)
                {
                    <div class="quiz-question">
                        <InputRadioGroup @bind-Value="attendanceQuiz!.selectedChoice">
                            <div class="question-number">
                                Question @(quizQuestions.IndexOf(questionDto) + 1) of @quizQuestions.Count
                            </div>


                            <div class="question-text">
                                <strong>@questionDto.QuestionText</strong>
                            </div>

                            @foreach(QuizAnswerDto quizAnswerDto in quizAnswers[quizQuestions.IndexOf(questionDto)])
                            {
                                <InputRadio Value="@quizAnswerDto.AnswerId" />
                                 <span class="ms-2">@quizAnswerDto.AnswerText</span><br />
                            }

                    

                        </InputRadioGroup>


                    </div><br />

                }

                <!-- button to handle form submission -->
                  <div class="submit-button-container">
                                <button type="submit">Submit</button>
                                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private AttendanceQuiz? attendanceQuiz = new AttendanceQuiz();

    private string currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
    private Timer? secondsTimer;

    // Student information from query parameters
    private string studentId = "";
    private Guid classId = Guid.Empty;
    private ClassDto classDto = new ClassDto();

    private bool isValidStudent = true;

    // Quiz state
    private QuizInstanceDto quizInstance = new QuizInstanceDto();
    private List<QuizQuestionDto> quizQuestions = new List<QuizQuestionDto>();
    private List<List<QuizAnswerDto>> quizAnswers = new List<List<QuizAnswerDto>>();

    private string userAnswer = "";

    private bool showFeedback = false;
    private string feedback = "";
    private string feedbackClass = "";

    private bool questionAnswered = false;
    private bool quizCompleted = false;
    private int score = 0;



    protected override async Task OnInitializedAsync()
    {
        // Get query parameters from URL
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        studentId = query["studentId"] ?? "";
        classId = new Guid(query["class"] ?? "");
        System.Diagnostics.Debug.WriteLine($"Query Class ID: {classId.ToString()}");

        // pull class from database where classId mntches query
        classDto = await Http.GetFromJsonAsync<ClassDto>($"api/class/{classId.ToString()}");
        System.Diagnostics.Debug.WriteLine($"Class Selected: {classDto.ClassName}");

        quizInstance = await Http.GetFromJsonAsync<QuizInstanceDto>($"api/quizinstance/{classId.ToString()}");
        System.Diagnostics.Debug.WriteLine($"Quiz Selected: {quizInstance.QuizId}");



        // error out, quiz instance not found
        if (quizInstance.QuizId == Guid.Empty)
        {
            return;
        }



        // Set up timer for current time display
        secondsTimer = new Timer(1000);
        secondsTimer.Enabled = true;
        secondsTimer.AutoReset = true;
        secondsTimer.Elapsed += (sender, e) => UpdateTime();

        // Only load quiz question if student is valid
        // Load quiz question
        await LoadQuizQuestions();
        await LoadQuizAnswers();
    }

    private async Task LoadQuizQuestions()
    {
        quizQuestions = await Http.GetFromJsonAsync<List<QuizQuestionDto>>($"api/quizquestion/{quizInstance.QuizId.ToString()}");
        System.Diagnostics.Debug.WriteLine($"Quiz Question: {quizQuestions.Count()}");
    }

    // load List<QuizAnswers> and add each list to a map to map QuizQuestion -> quizAnswers
    private async Task LoadQuizAnswers()
    {
        System.Diagnostics.Debug.WriteLine($"Quiz Answers:");
        foreach(QuizQuestionDto questionDto in quizQuestions)
        {
            List<QuizAnswerDto> answerDtos = await Http.GetFromJsonAsync<List<QuizAnswerDto>>($"api/quizanswer/{questionDto.QuestionId}");
            quizAnswers.Add(answerDtos);
        }
        System.Diagnostics.Debug.WriteLine($"Quiz Answers Size: {quizAnswers.Count()}");
    }

    // method to automatically update time on page
    private void UpdateTime()
    {
        InvokeAsync(() =>
        {
            // pulls current time and updates page with StateHasChanged
            currentTime = DateTime.Now.ToString("MMM dd, yyyy HH:mm");
            StateHasChanged();
        });
    }

    // method to handle quiz submissions
    // checks answers from QuizInstance pulled from database

    // TODO
    // create attendanceinstance on submission and post to database
    private void SubmitQuiz()
    {
        System.Diagnostics.Debug.WriteLine("====Detected Quiz Submission====");

        return;
    }

    private void FinishQuiz()
    {
        if (questionAnswered)
        {
            quizCompleted = true;
        }
    }

    // handle navigation back to home page
    private void ReturnToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SubmitQuiz();
        }
    }

    public void Dispose()
    {
        secondsTimer?.Dispose();
    }

    private class AttendanceQuiz
    {
        public string? questionText { get; set; }
        public string? selectedChoice { get; set; }
    }
}